using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Management.Automation;
using System.Collections.ObjectModel;


using rpc_201ef99a_7fa0_444c_9399_19ba84f12a1a_1_0;
using System.IO;
using System.Diagnostics;
using System.Timers;
using System.Threading;
using CsvHelper;
using CsvHelper.Configuration.Attributes;

namespace RPCExploit
{

    public class DataRecord
    {
        [Name("Time of Day")]
        public string TimeOfDay { get; set; }

        [Name("Process Name")]
        public string ProcessName { get; set; }

        public string PID { get; set; }
        public string Operation { get; set; }
        public string Path { get; set; }
        public string Result { get; set; }
        public string Detail { get; set; }

        //[Name("Image Path")]
        //public string ImagePath { get; set; }

        public static IEnumerable<DataRecord> ParseDataRecords(Stream file)
        {
            using (var sr = new StreamReader(file))
            using (var csv = new CsvReader(sr))
            {
                foreach (var record in csv.GetRecords<DataRecord>())
                {
                    yield return record;
                }
            }
        }
    }

    class Program
    {

        static int DURATION = 10;
        static string FILTER = "ProcessName,is,Explorer.exe,Include";

        static bool timerDone = false;
        static System.Timers.Timer aTimer = new System.Timers.Timer();
        static string fileName;

        private static void OnTimedEvent(object source, ElapsedEventArgs e)
        {
            if (!timerDone)
            {
                timerDone = true;
                aTimer.Enabled = false;

                Console.WriteLine("Procmon output generated. Parsing results...");

                TextReader textReader = new StreamReader(@"C:\Users\Karp\source\repos\RPCExploit\RPCExploit\bin\Debug\" + fileName);
                var csvReader = new CsvReader(textReader);
                var records = csvReader.GetRecords<DataRecord>();

                foreach(var record in records)
                {
                    Console.WriteLine(record.PID);
                    Console.WriteLine(record.Path);
                    Console.WriteLine(record.Operation);
                    Console.WriteLine(record.ProcessName);
                    Console.WriteLine(record.Result);
                    Console.WriteLine(record.Detail);
                    Console.WriteLine(record.TimeOfDay);
                    Console.WriteLine();
                }

                // Now we implement the logic for finding a particular LPE indicator


            }
            
            
        }

        static void Main(string[] args)
        {

            var ps = @"C:\Users\Karp\source\repos\RPCExploit\RPCExploit\test.ps1";
            var processInfo2 = Process.Start(@"powershell.exe", " -ExecutionPolicy Bypass procmon.exe /Terminate"); // just in case it's already running
            Thread.Sleep(1000);

            
            aTimer.Elapsed += new ElapsedEventHandler(OnTimedEvent);
            aTimer.Interval = (DURATION + 10) * 1000; // lets add a 10 second buffer for while it saves the results to disk just in case
            aTimer.Enabled = true;


            // generate our noise for procmon
            // in this example we're calling a random function with random params on an RPC server
            Client client = new Client();
            client.Connect();
            client.SvchostPushServiceGlobals_5(-1);

            Guid id = Guid.NewGuid();
            fileName = id.ToString() + ".csv";

            var processInfo = Process.Start(@"powershell.exe", " -ExecutionPolicy Bypass -File " + ps + " -Filter " + FILTER + " -Duration " + DURATION + " -CsvName " + fileName);

            Console.WriteLine("Press \'q\' to quit the sample.");
            while (Console.Read() != 'q') ;





        }
    }
}
